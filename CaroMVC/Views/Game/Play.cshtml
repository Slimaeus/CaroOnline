@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewData["Title"] = "Play";
}
<style>
    .game-button:disabled {
        opacity: unset;
        /*background-color: red;*/
    }
    </style>
@model Model.ActionModels.PlayModel
<div class="container text-center">
    <h1 id="room-name">@Model.Room!.RoomName</h1>
    <div class="row">
        @foreach (var user in Model.Room!.GameUsers)
        {
            <div class="col">
                <span>Player: @user.UserName</span>
            </div>
        }
    </div>
</div>
<div class="container" id="board">
    <div class="row" id="user-list" room="@Model.Room.RoomName">
    </div>
    @for (int row = 0; row < Model.Board.RowCount; row++)
    {
        <div class="row d-flex justify-content-xl-center justify-content-xxl-center flex-nowrap">
            @for (int col = 0; col < Model.Board.ColumnCount; col++)
            {
                <button class="col-1 btn btn-outline-dark w-auto game-button" row="@row" col="@col">&nbsp;&nbsp;&nbsp;</button>
            }
        </div>
    }
</div>
@section Scripts {
    <script src="~/lib/microsoft-signalr/signalr.min.js"></script>
    <script src="~/js/classes/Game.js"></script>
    <script src="~/js/classes/Move.js"></script>
    <script> 
        const game = new Game();
        const userList = document.getElementById("user-list");
        const buttonList = document.querySelectorAll(".game-button");
        const board = document.getElementById("board");

        const preventClick = (e) => {
            e.preventDefault();
        };
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/hubs/game")
            .configureLogging(signalR.LogLevel.Information)
            .build();
        // Catch Update Board Event
        connection.on("updateBoard", (userName, row, col, color) => {
            game.moves.push(new Move(row,  col, userName));
            const updateButtons = document.querySelectorAll(`button[row = "${row}"][col = "${col}"]`);
            updateButtons.forEach((button) => {
                // Set if this button clicked
                button.setAttribute("clicked", "true")
                button.className = button.className.replace("outline-dark", color);
            })
        });
        // Catch Enable Board Event
        connection.on("enableBoard", () => {
            buttonList.forEach(button => {
                if (button.getAttribute("clicked") !== "true")
                    button.disabled = false
            });
        });
        // Catch Game End Event
        connection.on("gameEnd", (winner) => {
            const roomNameNode = document.getElementById("room-name");
            roomNameNode.innerText = `The Winner is ${winner}`;
        });
        connection.start()
            .then(() => console.log("Connected!"))
            .catch(console.error);

        buttonList.forEach((button) => {
            button.addEventListener("click", () => {
                const row = button.getAttribute("row");
                const col = button.getAttribute("col");
                const roomName = userList.getAttribute("room");
                const userName = "@User.Identity?.Name";
                const move = new Move(row,  col, userName);
                const line = game.getHorLine(move);
                if (game.isWinner(move))
                {
                    connection.invoke("GameEnd", roomName, move.userName);
                }
                console.log("This is current line")
                console.table(line)
                // button.className = button.className.replace("outline-dark", "success");
                buttonList.forEach(button => button.disabled = true);
                connection.invoke("PlaceStone", roomName, Number(row), Number(col));
            });
            
            
        });
    </script>
}