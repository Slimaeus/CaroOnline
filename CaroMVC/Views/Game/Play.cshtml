@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewData["Title"] = "Play";
}
<style>
    .game-button:disabled {
        opacity: unset;
    }
    </style>
@model Model.ActionModels.PlayModel
<div class="container text-center">
    <h1 id="room-name">Room Name: @Model.Room!.RoomName</h1>
    <div class="row" id="player-list">
        @foreach (var user in Model.Room!.GameUsers)
        {
            <div class="col-6 player-name" id="@user.UserName">
                <label>Player: </label>
                <span>@user.UserName</span>
            </div>
        }
    </div>
    <button class="btn btn-danger" id="btn-leave" room="@Model.Room!.RoomName">Leave</button>
</div>

<div class="container position-relative" id="board">
    <div class="row" id="user-list" room="@Model.Room.RoomName">
    </div>
    @for (int row = 0; row < Model.Board.RowCount; row++)
    {
        <div class="row d-flex justify-content-xl-center justify-content-xxl-center flex-nowrap">
            @for (int col = 0; col < Model.Board.ColumnCount; col++)
            {
                <button class="col-1 btn btn-outline-dark bi bi-hand-index-thumb text-white w-auto game-button" row="@row" col="@col"></button>
            }
        </div>
    }
</div>
<!-- Button trigger modal -->
<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#staticBackdrop" id="btn-test" hidden>
    test
</button>

<!-- Modal -->
<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content text-center">
            <div class="modal-header w-100">
                <h5 class="modal-title text-center" id="staticBackdropLabel">Result</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="result-text">
            </div>
            <div class="modal-footer">
                <a asp-action="Index" class="btn btn-dark btn-info">Close</a>
                <a asp-action="History" class="btn btn-dark">History</a>
                <a class = "btn btn-dark" id="btn-rematch">Rematch</a>
            </div>
        </div>
    </div>
</div>


<!-- Scripts -->
@section Scripts {
    <script src="~/lib/microsoft-signalr/signalr.min.js"></script>
    <script src="~/js/classes/Game.js"></script>
    <script src="~/js/classes/Move.js"></script>
    <script>

        const game = new Game();
        const userList = document.getElementById("user-list");
        const buttonList = document.querySelectorAll(".game-button");
        const board = document.getElementById("board");
        //buttonList.forEach(button => button.disabled = true);

        const rematchButton = document.getElementById("btn-rematch");
        const playerNames = document.querySelectorAll('.player-name');
        const leaveButton = document.getElementById("btn-leave");
        // Create Connection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/hubs/game")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        // Catch When Someone Leave
        connection.on("leaveRoom", (leaveRoomName) => {
            const roomName = userList.getAttribute("room");
            if (leaveRoomName == roomName) {
                location.reload();
            }
        });
        // Catch When Someone Join
        connection.on("newPlayerJoin", (userName) => {
            const playerList = document.getElementById("player-list");
            const newPlayer = document.createElement("div");
            newPlayer.className = "col-6 player-name";
            newPlayer.id = userName;
            newPlayer.innerHTML = '<label>Player: </label><span> ' + userName + '</span>';
            playerList.appendChild(newPlayer);
        });
        // Catch Update Board Event
        connection.on("updateBoard", (userName, row, col, color) => {
            if ("@User!.Identity!.Name".localeCompare(userName) != 0) {
                const userDisplay = document.getElementById(userName);
                userDisplay.classList.add("text-danger");
            }
            game.moves.push(new Move(row,  col, userName));
            const updateButtons = document.querySelectorAll(`button[row = "${row}"][col = "${col}"]`);
            updateButtons.forEach((button) => {
                // Set if this button clicked
                button.setAttribute("clicked", "true")
                button.className = button.className.replace("outline-dark bi bi-hand-index-thumb text-white", color);
            })
        });
        // Catch Rematch Event
        connection.on("rematch", () => {
            location.reload();
        });
        connection.on("enableBoard", () => {
            buttonList.forEach(button => {
                if (button.getAttribute("clicked") !== "true")
                    button.disabled = false
            });
        });
        // Catch Enable Board Event
        // Catch Game End Error Event
        connection.on("gameEndError", (error) => {
            alert(error);
        });
        // Catch Game End Event
        connection.on("gameEnd", (winnerUserName, winnerInGameName) => {
            const board = document.getElementById("board");
            board.style.pointerEvents = "none";
            const roomNameNode = document.getElementById("room-name");
            const resultTest = document.getElementById("btn-test");
            resultTest.click();
            const resultCard = document.getElementById("staticBackdrop");
            const resultText = document.getElementById("result-text");
            roomNameNode.innerText = `The Winner is ${winnerInGameName}`;
            resultText.innerText = `The Winner is ${winnerInGameName}`;
            resultCard.style.visibility = "visible";
        });
        connection.start()
            .then(() => console.log("Connected!"))
            .catch(console.error);

        buttonList.forEach((button) => {
            button.addEventListener("click", () => {
                playerNames.forEach((name) => {
                    name.className = name.className.replace("text-danger", '');
                });
                const row = button.getAttribute("row");
                const col = button.getAttribute("col");
                const roomName = userList.getAttribute("room");
                const userName = "@User.Identity?.Name";
                const move = new Move(row,  col, userName);
                buttonList.forEach(button => button.disabled = true);
                connection.invoke("PlaceStone", roomName, Number(row), Number(col));
                if (game.isWinner(move))
                {
                    connection.invoke("GameEnd", roomName, move.userName, new Date(game.startedDate));
                }
            });
        });

        rematchButton.addEventListener("click", () => {
            const roomName = userList.getAttribute("room");
            connection.invoke("GameRematch", roomName);
        })

        leaveButton.addEventListener("click", () => {
            connection.invoke("RoomLeave", "@Model.Room.RoomName");
        });
    </script>
}